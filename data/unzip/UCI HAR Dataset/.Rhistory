x<-(0:69)
as.numeric(x)
as.ligical(x)
as.logical(x)
as.character(x)
as.complex(x)
m <- matrix(nrow=4, ncol=3)
m
dim(m)
attributes(m)
m <- matrix(1:12, nrow=4, ncol=3)
m
w <- 1:24
w
w<-matrix(nrow=3, ncol=8)
w
w <- 1:24
dim(w) <-(3, 8)
dim(w) <- c(3, 8)
w
x <-(2:5)
x
y<-22:25
cbind(x,y)
w<-cbind(x,y)
w
rbind(x,y)
z<-rbind(x,y)
z
x<-list("carlos", 23, FALSE, 3+2i)
x
x <- factor(c("male","female","male","female","male","female","female", "female","male"))
x
table(x)
unclass(x)
attribute(,"levels")
attr(,"levels")
x <- factor(c("male","female","male","female","male","female","female", "female","male")), levels = c("male", "female")
x <- factor(c("male","female","male","female","male","female","female", "female","male"), levels = c("male", "female"))
x
is.na(x)
is.nan(x)
x<-data.frame(foo=1:4, res=c(T,F,F,F,T))
x<-data.frame(foo=1:5, res=c(T,F,F,F,T))
x
nrow(x)
ncol(x)
x <-(1, 2, 3, 4)
x <- c(1, 2, 3, 4)
names(x)
names(x)<-c("pepe", "pedro", "juan", "carlos", "maria")
names(x) <- c("pepe", "pedro", "juan", "carlos")
names(x)
x
m <- matrix(1:8, nrow=4, ncol=8)
dimnames(m) <- list(c(a, b, c,d), c(w,z))
dimnames(m) <- list(c("a", "b", "c", "d"), c("w", "z"))
dim(m)
m <- matrix(1:8, nrow=4, ncol=2)
m
dimnames(m) <- list(c("a", "b", "c", "d"), c("w", "z"))
m
<html>
x <- c("A", "B, "C", "D", "E")
x[2]
x
x <- c("A", "B", "C", "D", "E")
x[2]
x[1:3]
x[x>"C"]
u <- x>"B"
u
x[u]
##subseting a matrix
x <- matrix(1:6, 2, 3)
x
x[1,1]
x[2,3]
x[1,]
x[,3]
x[1, ,drop=false]
x[1, ,drop=FALSE]
x[1, ,drop=TRUE]
##SUBSETTING LISTS
X <- list(foo = 1:4, bar = 0.6)
x
x[1]
$foo
x[1]
$ foo
x[1]
$foo
X <- list(foo = 1:4, bar = 0.6)
X
X[1]
X[[1]]
X
X$bar
$bar
X["bar"]
X["foo"]
X <- list(foo = 1:4, bar = 0.6, baz = "hola")
X[c(1,3)]
X[c(1,2)]
X[c(2,3)]
x <- list(carloton = 1:40)
x$c
x
x[1[5]]
x[[5]]
x[["a"]]
x[["c"]]
x[["c", exact = FALSE]]
X <- C(1, 2, NAN, 4, NA, 6, NA)
x <- c(1, 2, NAN, 4, NA, 6, NA)
x <- c(1, 2, NA, 4, NA, 6, NA)
miss <- is.na(x)
x[!miss]
a <- available packages
a <- available.packages()
head(rownames(a), 3)
install.packages("slidify")
q()
list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
mapply(rep, 1:4, 4:1)
noise = function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
log(0)
log(0.000000000000001)
log(-0.1)
library(datasets)
data(iris)
?iris
head(iris)
?subset
tapply(Sepal.Length, Species, mean)
tapply(Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
c=tapply(mtcars$hp, mtcars$cyl, mean)
c
x = c[2,1] - c[2,3]
x = c[1,1] - c[1,3]
class(c)
c[1, ]
c[1, , ]
c[1
c[1]
c[1]
x=c[1]-c[3]
x
c
debug(ls)
ls()
ls()
x
ls()
ls(x)
ls
ls
debug(ls)
ls
ls()
debug(ls)
ls
debug(ls)
ls()
ls()
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x=tapply(mtcars$hp, mtcars$cyl, mean)
y = x[1] - x[3]
y
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
##Programming Assignment 2##
#Example: Caching the Mean of a Vector
#In this example we introduce the <<- operator which can be used to assign a value to an object in an environment that is different from the current environment. Below are two functions that are used to create a special object that stores a numeric vector and cache's its mean.
#The first function, makeVector creates a special "vector", which is really a list containing a function to
set the value of the vector
get the value of the vector
set the value of the mean
get the value of the mean
##Programming Assignment 2##
#Example: Caching the Mean of a Vector
#In this example we introduce the <<- operator which can be used to assign a value to an object in an environment that
#is different from the current environment. Below are two functions that are used to create a special object that stores
#a numeric vector and cache's its mean.
#The first function, makeVector creates a special "vector", which is really a list containing a function to
#set the value of the vector
#get the value of the vector
#set the value of the mean
#get the value of the mean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
}
}
}
q()
q()
q()
q()
q()
q()
q()
q()
#2 Finding the best hospital in a state
best <- function(state, outcome) {
## Outcomes must be "heart attack", "heart failure", or "pneumonia"
outcomes <- c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == F) stop("invalid outcome")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Filter and simplify the column names
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Check that state and outcome are valid
#Outcome was validated previously, now let's validate the state:
states <- data[, 2]
states <- unique(states)
if(state %in% states == F) stop("invalid state")
#Get valid states only:
data <- data[data$state == state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death
data[rowNum, ]$name
}
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("caret")
library(caret)
q()
library(caret)
install.packages("lattice", "ggplot2")
install.packages("lattice", "ggplot2")
install.packages("ggplot2")
install.packages("lattice")
install.packages("caret")
library(caret)
LIBRARY(KERNLAB)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
training <- spam[inTrain,]
inTrain <- createDataPartition(y=spam$type, p=0.75, list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling)")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(testing)
View(testing)
View(training)
View(training)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(training)
View(training)
View(testing)
View(testing)
View(testing)
View(predictors)
View(predictors)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
dim(training)
dim(testing)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(predictors)
View(predictors)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
adData = data.frame(diagnosis, predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
dim(training)
dim(testing)
View(training)
View(training)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
View(testing)
View(testing)
View(training)
View(training)
dim(testing)
adData = data.frame(diagnosis, predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
dim(training)
dim(testing)
q()
setwd("C:/Users/Carlos DÃ­az/Dropbox/Coursera/Datascesp/GCD/data/unzip/UCI HAR Dataset")
#Reading and creating one data training-test set:
################################################
library("dplyr")
library("reshape2")
X_trn <- read.table("./train/X_train.txt")
Y_trn <- read.table("./train/Y_train.txt")
Sub_trn <- read.table("./train/subject_train.txt")
#datos training
Xtrn = X_trn
Xtrn[,562] = Y_trn
Xtrn[,563]= Sub_trn
#For test data:
X_tst <- read.table("./test/X_test.txt")
Y_tst <- read.table("./test/Y_test.txt")
Sub_tst <- read.table("./test/subject_test.txt")
#datos test
Xtst = X_tst
Xtst[,562] = Y_tst
Xtst[,563]= Sub_tst
#Getting the names
actvt_lbl=read.table("./activity_labels.txt")
feat=read.table("./features.txt")
feat[,2]=gsub('-mean', 'Mean', feat[,2])
feat[,2] = gsub('-std', 'Std', feat[,2])
feat[,2] = gsub('[-()]', '', feat[,2])
##1->Merge training and test data:
TTall=rbind(Xtrn, Xtst)
##2->Extracts only the measurements on the mean and standard deviation for each measurement.
Data_filt=grep(".*Mean.*|.*Std.*", feat[,2])
feat = feat[Data_filt,]
Data_filt = c(Data_filt, 562, 563)
#Database filtered:
TTall = TTall[,Data_filt]
#4 Appropriately labels the data set with descriptive variable names. :
colnames(TTall)=c(feat$V2, "Activity", "Subject")
View(TTall)
#3->Uses descriptive activity names to name the activities in the data set
currentActivity = 1
for (currentActivityLabel in actvt_lbl$V2) {
TTall$Activity <- gsub(currentActivity, currentActivityLabel, TTall$Activity)
currentActivity <- currentActivity + 1
}
#5->From the data set in step 4, creates a second, independent tidy data set with the average
#of each variable for each activity and each subject.
TTall$Activity <- as.factor(TTall$Activity)
TTall$Subject <- as.factor(TTall$Subject)
tidy_data = aggregate(TTall, by=list(Activity = TTall$Activity, subject=TTall$Subject), mean)
tidy_data[,90] = NULL
tidy_data[,89] = NULL
write.table(tidy_data, "tidy.txt", sep="\t")
View(tidy_data)
#################################################
setwd("C:/Users/Carlos DÃ­az/Dropbox/Coursera/Datascesp/GCD/data/unzip/UCI HAR Dataset")
#Reading and creating one data training-test set:
################################################
library("dplyr")
library("reshape2")
X_trn <- read.table("./train/X_train.txt")
Y_trn <- read.table("./train/Y_train.txt")
Sub_trn <- read.table("./train/subject_train.txt")
#datos training
Xtrn = X_trn
Xtrn[,562] = Y_trn
Xtrn[,563]= Sub_trn
#For test data:
X_tst <- read.table("./test/X_test.txt")
Y_tst <- read.table("./test/Y_test.txt")
Sub_tst <- read.table("./test/subject_test.txt")
#datos test
Xtst = X_tst
Xtst[,562] = Y_tst
Xtst[,563]= Sub_tst
#Getting the names
actvt_lbl=read.table("./activity_labels.txt")
feat=read.table("./features.txt")
feat[,2]=gsub('-mean', 'Mean', feat[,2])
feat[,2] = gsub('-std', 'Std', feat[,2])
feat[,2] = gsub('[-()]', '', feat[,2])
##1->Merge training and test data:
TTall=rbind(Xtrn, Xtst)
##2->Extracts only the measurements on the mean and standard deviation for each measurement.
Data_filt=grep(".*Mean.*|.*Std.*", feat[,2])
feat = feat[Data_filt,]
Data_filt = c(Data_filt, 562, 563)
#Database filtered:
TTall = TTall[,Data_filt]
#4 Appropriately labels the data set with descriptive variable names. :
colnames(TTall)=c(feat$V2, "Activity", "Subject")
View(TTall)
#3->Uses descriptive activity names to name the activities in the data set
currentActivity = 1
for (currentActivityLabel in actvt_lbl$V2) {
TTall$Activity <- gsub(currentActivity, currentActivityLabel, TTall$Activity)
currentActivity <- currentActivity + 1
}
#5->From the data set in step 4, creates a second, independent tidy data set with the average
#of each variable for each activity and each subject.
TTall$Activity <- as.factor(TTall$Activity)
TTall$Subject <- as.factor(TTall$Subject)
tidyAvrg_data = aggregate(TTall, by=list(Activity = TTall$Activity, subject=TTall$Subject), mean)
tidyAvrg_data[,90] = NULL
tidyAvrg_data[,89] = NULL
write.table(tidyAvrg_data, "tidy_avrg.txt", sep="\t")
View(tidyAvrg_data)
